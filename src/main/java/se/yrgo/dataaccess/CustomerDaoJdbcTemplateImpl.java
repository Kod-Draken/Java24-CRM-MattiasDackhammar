package se.yrgo.dataaccess;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import se.yrgo.domain.Action;
import se.yrgo.domain.Call;
import se.yrgo.domain.Customer;

import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.List;

public class CustomerDaoJdbcTemplateImpl implements CustomerDao {
    private static final String DELETE_SQL = "DELETE FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static final String UPDATE_SQL = "UPDATE CUSTOMER SET COMPANY_NAME=?, EMAIL=?, TELEPHONE=?, NOTES=? WHERE CUSTOMER_ID=?";
    private static final String INSERT_SQL = "INSERT INTO CUSTOMER (COMPANY_NAME, EMAIL, TELEPHONE, NOTES) VALUES (?,?,?,?)";
    private static final String GET_BY_ID_SQL = "SELECT * FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static final String GET_BY_NAME_SQL = "SELECT * FROM CUSTOMER WHERE COMPANY_NAME=?";
    private static final String GET_ALL_SQL = "SELECT * FROM CUSTOMER";
    private static final String INSERT_CUSTOMER_CALL = "INSERT INTO TBL_CALL (TIMEANDDATE, NOTES, CUSTOMER_ID) VALUES (?,?,?)";

    private static final String GET_CALL_BY_CUSTOMER = "SELECT * FROM TBL_CALL WHERE CUSTOMER_ID=?";

    private JdbcTemplate template;

    public CustomerDaoJdbcTemplateImpl(JdbcTemplate template) {
        this.template = template;
        createTables();
    }

    @Override
    public void create(Customer customer) {
        template.update(INSERT_SQL, customer.getCompanyName(), customer.getEmail(), customer.getTelephone(), customer.getNotes());
    }

    private void createTables() {
        try {
            this.template.update("CREATE TABLE CUSTOMER (CUSTOMER_ID integer generated by default as identity (start with 1), COMPANY_NAME VARCHAR(100), EMAIL VARCHAR(40), TELEPHONE VARCHAR(12), NOTES VARCHAR(255))");
            this.template.update("CREATE TABLE TBL_CALL(CALL_ID integer generated by default as identity (start with 1), TIMEANDDATE TIMESTAMP, NOTES VARCHAR(255), CUSTOMER_ID VARCHAR(20))");
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            System.out.println("Assuming both tables exist");
        }
    }

    @Override
    public Customer getById(String customerId) throws RecordNotFoundException {
        return this.template.queryForObject(GET_BY_ID_SQL, new CustomerRowMapper(), customerId, false);
    }

    @Override
    public List<Customer> getByName(String name) {
        return this.template.query(GET_BY_NAME_SQL, new CustomerRowMapper(), name, false);
    }

    @Override
    public void update(Customer customerToUpdate) throws RecordNotFoundException {
        this.template.update(UPDATE_SQL, customerToUpdate.getCompanyName(),customerToUpdate.getEmail(), customerToUpdate.getTelephone(), customerToUpdate.getNotes(), customerToUpdate.getCustomerId() );
    }

    @Override
    public void delete(Customer oldCustomer) throws RecordNotFoundException {
        this.template.update(DELETE_SQL, oldCustomer.getCustomerId());
    }

    @Override
    public List<Customer> getAllCustomers() {
        return this.template.query(GET_ALL_SQL, new CustomerRowMapper());
    }

    @Override
    public Customer getFullCustomerDetail(String customerId) throws RecordNotFoundException {
        Customer customer = getById(customerId);
        List<Call> calls = this.template.query(GET_CALL_BY_CUSTOMER, new CallRowMapper(), customerId, false);
        customer.setCalls(calls);

        return customer;
    }

    @Override
    public void addCall(Call newCall, String customerId) throws RecordNotFoundException {
        this.template.update(INSERT_CUSTOMER_CALL, newCall.getTimeAndDate(), newCall.getNotes(), customerId);
    }
}

class CustomerRowMapper implements RowMapper<Customer> {
    public Customer mapRow(ResultSet rs, int arg1) throws SQLException 	{
        String customerId = rs.getString(1);
        String companyName = rs.getString(2);
        String email = rs.getString(3);
        String phone = rs.getString(4);
        String notes = rs.getString(5);

        return new Customer("" + customerId, companyName, email, phone, notes);
    }
}

class CallRowMapper implements RowMapper<Call> {
    public Call mapRow(ResultSet rs, int arg1) throws SQLException 	{
        Date timeAndDate = rs.getDate(1);
        String notes = rs.getString(2);

        return new Call(notes, timeAndDate);
    }
}